//leetcode 139
    public boolean wordBreak(String s, List<String> wordDict) {
        int n = s.length();
        HashSet<String> set = new HashSet<>();
        int ml = 0;
        for(String ss : wordDict){
            set.add(ss);
            ml = Math.max(ml , ss.length());
        }
        
        boolean [] dp = new boolean[n+1];
        dp[0] = true;
        for(int i = 0; i<=n; i++){
            if(dp[i]==true){
                
                for(int l = 1; l<=ml+i && i+l<=n; l++){
                    String subs = s.substring(i,i+l);
                    if(set.contains(subs)){
                        dp[i+l] = true;
                    }
                }
            }
            if(dp[n]==true) return true;
        }
        return false;
    }
//leetcode 140

public List<String> wordBreak(String s, List<String> wordDict) {
        HashSet<String> set = new HashSet();
        int maxLen = 0;
        for(String ss : wordDict){
            set.add(ss);
            maxLen = Math.max(maxLen , ss.length());
        }
        int n = s.length();
        boolean[] dp = new boolean[n+1];
        dp[0] = true;
        for(int i = 0; i<=n; i++){
            if(dp[i]==true){
                
                for(int l = 1; l<=maxLen && i+l<=n; l++){
                   String sbs =  s.substring(i,i+l);
                   if(set.contains(sbs)){
                      dp[i+l] = true; 
                     }
                }
                
            }
        }
        List<String> ans = new ArrayList<>();
        if(dp[n]==false) return ans;
        helper(ans,0,"",s,set,dp,maxLen);
        return ans;
    }
    public void helper(List<String> ans,int i,String asf,String s,HashSet<String> set,boolean[] dp,int maxLen){
        if(i>=s.length()){
           ans.add(asf.substring(0,asf.length()-1));
            return;
        }
        
        for(int l = 1; l<=maxLen && i+l<=s.length(); l++){
            if(dp[i+l]){
                String ss = s.substring(i,i+l);
                if(set.contains(ss)){
                   helper(ans,i+l,asf+ss+" ",s,set,dp,maxLen); 
                }
                
            }
            
        }
        
    }
    
    // zer one knapsack
    
     public static void main(String[] args) throws Exception {
       Scanner scn = new Scanner(System.in);
       int n = scn.nextInt();
        int[] values = new int[n];
        for(int i = 0; i<n; i++) values[i]  = scn.nextInt();  
     
     
        int[] weight = new int[n];
        for(int i = 0; i<n; i++) weight[i]  = scn.nextInt(); 
        
        int capacity = scn.nextInt();
        int [][] dp = new int[n+1][capacity+1];
        for(int i = 1; i<=n; i++){
            for(int cap = 1; cap<=capacity; cap++){
                int val = values[i-1];
                int wt = weight[i-1];
                if(cap>=wt){
                    int inc = val+dp[i-1][cap-wt];
                    int exc = dp[i-1][cap];
                    dp[i][cap] = Math.max(inc,exc);
                    
                }else{
                    // exclude
                    dp[i][cap]=dp[i-1][cap];
                }
                
            }
        }
        System.out.println(dp[n][capacity]);
    }
    
    //leetcode 300
    
    int fans;
    public int lengthOfLIS(int[] nums) {
        // fans = 1;
        // LIS_rec(nums,nums.length-1,new int[nums.length] );
        // return fans;
        return LIS_tab(nums);
    }
     public int LIS_rec(int[] nums , int ei,int[] dp){
        if(ei==0){
            return dp[ei] = 1;
        }
        if(dp[ei] != 0) return dp[ei];
        int len = 1;
        for(int si = 0; si<= ei-1; si++){
            int rec = LIS_rec(nums,si,dp);
            if(nums[si]<nums[ei]){
                len = Math.max(rec+1,len);
            }
        }
        fans = Math.max(fans,len);
        return dp[ei] = len;
    }
    public int LIS_tab(int[] nums){
        
        int ans = 1;
        int[] dp = new int[nums.length];
        Arrays.fill(dp,1);
        for(int ei = 1; ei<nums.length; ei++){
           for(int si = 0; si<ei; si++){
               if(nums[si]<nums[ei]){
                   dp[ei] = Math.max(dp[si]+1,dp[ei]);
               }
           }
            ans = Math.max(ans , dp[ei]);
        }
        return ans;
        
    }
    
    //unbounded knapsack
           
           int[] dp = new int[capacity+1];
           
           for(int cap = 1; cap<=capacity; cap++){
               int max= 0;
               for(int i = 0; i<n; i++){
                   int vl = values[i];
                   int wt = weight[i];
                   if(cap>=wt){  //check item
                      int amt = vl+dp[cap-wt];
                      if(max<amt){
                          max = amt;
                      }
                   }
               }
               
               dp[cap] = max;
           }
           
           System.out.println(dp[capacity]);
//longest bitonic subsequence           
     public int LongestBitonicSequence(int[] nums)
    {
        int n = nums.length;
        int [] LIS = new int[n];
        int [] LDS = new int[n];
        LIS_LR(nums , LIS);
        LIS_RL(nums, LDS);
        int ans = 0;
        for(int i =0; i<n; i++){
            ans = Math.max(ans,LIS[i]+LDS[i] - 1);
        }
        return ans;
    }
    
    public void LIS_LR(int[] nums,int[] dp){
        Arrays.fill(dp,1);
        int n = nums.length;
        for(int ei = 0; ei<n; ei++){
          for(int si = 0; si<ei; si++){
              if(nums[si] <nums[ei]){
                 dp[ei] = Math.max(dp[si]+1,dp[ei]);
              }
          }   
        }
        
    }
    public void LIS_RL(int[] nums,int[] dp){
        Arrays.fill(dp,1);
        int n = nums.length;
        for(int ei = n-1; ei>=0; ei--){
          for(int si = ei+1; si<n; si++){
              if(nums[si] <nums[ei]){
                 dp[ei] = Math.max(dp[si]+1,dp[ei]);
              }
          }   
        }
        
    }
   //leetcode 673 
    public int findNumberOfLIS(int[] nums) {
        int maxLen = 1,maxCount = 1;
        int n = nums.length;
        int [] dp = new int[n];
        int count[] = new int[n];
        Arrays.fill(dp,1);
        Arrays.fill(count,1);
        for(int ei = 1; ei<n; ei++){
            for(int si = 0; si<ei; si++){
                if(nums[si]<nums[ei]){
                    if(dp[si]+1>dp[ei]){
                        dp[ei] = dp[si]+1;
                        count[ei]=count[si];
                    } else if(dp[si]+1==dp[ei]){
                        count[ei]+=count[si];
                    }
                }
            }
            if(dp[ei]>maxLen){
                maxLen = dp[ei];
                maxCount = count[ei];
            }else if(dp[ei]==maxLen){
                maxCount+=count[ei];
            }
            
        }
        
        return maxCount;
    }
    
    // leetcode 354
    
     public class Pair implements Comparable<Pair> {
        int w;
        int h;
        Pair(int w , int h){
            this.w = w;
            this.h = h;
        }
        public int compareTo(Pair O){
         if( this.w != O.w) return this.w - O.w; //sort width in increasing order
        else return O.h- this.h;  //sort height in decreasing order
        }
    }
    
    public int maxEnvelopes(int[][] envelopes) {
         
        int n = envelopes.length;
        Pair[] arr = new Pair[n];
        for(int i=0; i<n; i++){
        arr[i] = new Pair(envelopes[i][0] , envelopes[i][1]);
        }
        
        Arrays.sort(arr);
        
        int[] dp = new int[n];
        // LIS
        int ans =0;
        for(int ei = 1; ei<n; ei++){
           for(int si = 0; si<ei; si++){
               if(arr[si].h < arr[ei].h && dp[si]+1 > dp[ei]){
                   dp[ei] = dp[si]+1;
               }
               
           }
            ans = Math.max(ans,dp[ei]);
        }
        
        return ans+1;
    }
    
    leetcode 377
    
    public int combinationSum4(int[] nums, int amt) {
        int[] dp = new int[amt+1];
        dp[0] = 1;
        for(int i = 0; i<dp.length; i++){
            for(int coin : nums){
                if(coin<=i){
                    dp[i] += dp[i-coin];
                }   
            }
        }
        
        return dp[amt];
    }
    
    //leetcode 322
    
    public int coinChange(int[] coins, int amt) {
       // return rec(coins, amt,new int[amt+1]);
        return tab(coins,amt);
    }
    public int rec(int[] coins, int amt , int[] dp){
        if(amt<0) return -1;
        if(amt==0) return 0;
        
        if(dp[amt]!=0) return dp[amt];
        
        int min = Integer.MAX_VALUE;
        for(int coin : coins){
           int x = rec(coins , amt - coin, dp);
            if(x>=0 && x<min){
               min = x+1;  // count for current coin
            }
        }
        
        return dp[amt] = (min==Integer.MAX_VALUE) ? -1 : min;
        
    }
    public int tab(int[] coins , int amt){
        int[] dp = new int[amt+1];
        Arrays.fill(dp, (int)1e9);
        dp[0] = 0;
        for(int i =0; i<=amt; i++){
            for(int coin : coins){
               if(i-coin>=0) dp[i] = Math.min(dp[i] , dp[i-coin]+1);
            }
        }
        if(dp[amt] != (int)1e9) return dp[amt];
        return -1;
    }
    
    //Subset Sum Problem
    
    static Boolean isSubsetSum(int N, int arr[], int sum){
        boolean[][] dp = new boolean[N+1][sum+1];
        
        for(int i=0; i<=N; i++){
            for(int tar = 0; tar<=sum; tar++){
                if(tar==0) dp[i][tar] = true;
                else if(i==0) dp[i][tar] = false;
                else{
                    if(tar-arr[i-1]>=0){
                        dp[i][tar] = dp[i-1][tar] || dp[i-1][tar-arr[i-1]];
                    }else{
                        dp[i][tar] = dp[i-1][tar];  //exclude 
                    }
                    
                }
            }
        }
        
        return dp[N][sum];
    }
    
    //leetcode 416
    
    public boolean canPartition(int[] nums) {
        int sum = 0;
        int n = nums.length;
        for(int num : nums) sum+=num;
        
        if(sum%2!=0 || n==1) return false;
        
        return isSubsetSum(n , nums, sum/2);
    }
    public Boolean isSubsetSum(int N, int arr[], int sum){
        boolean[] dp = new boolean[sum+1];
        dp[0] = true;
        for(int num : arr){
            for(int tar = sum; tar>0; tar--){
               if(tar-num>=0) dp[tar] = dp[tar-num] || dp[tar];   
            }
            if(dp[sum]==true) return true;
        }
        
        return dp[sum];
    }
    
    // leetcode 494
    
    public int findTargetSumWays(int[] nums, int target) {
        int n = nums.length;
        int s = 0;
        for(int num : nums){
            s+=num;
        }
        if(target>s || target < -s) return 0;
        
         int[][] dp = new int[n+1][2*s+1];
        for(int[] d : dp){
            Arrays.fill(d,-1);
        }
        
        return targetSumSubset(n,nums,target+s,s,dp);
    }
    
    public int targetSumSubset(int idx, int[] nums ,int target,int sum,int[][] dp){
        if(idx==0){
           if(sum==target) return dp[idx][sum]=1;
           return dp[idx][sum]=0;
        }
         if(dp[idx][sum] != -1) return dp[idx][sum]; 
         int count = 0;
         count+=targetSumSubset(idx-1,nums,target,sum+nums[idx-1],dp);
         count+=targetSumSubset(idx-1,nums,target,sum-nums[idx-1],dp);
        
        return dp[idx][sum]=count;
    }
    
    //end
    
    
    
